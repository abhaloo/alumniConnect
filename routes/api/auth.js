const express = require('express');
const router = express.Router();
const { check, validationResult } = require('express-validator');
const config = require('config');
const jsonwebtoken = require('jsonwebtoken');
const bcrypt = require('bcryptjs');


const auth = require('../../middleware/auth');

const User = require('../../models/User');


//@route GET api/auth
//@desc 
//@access Public  
router.get('/',auth, async (req,res) => {
    try {
        
        const user = await User.findById(req.user.id).select('-password');
        res.json(user);

    } catch (error) {
        console.log('Error in api/auth:\n');
        console.log(error);
        res.status(500).send('Server Error');
    }
});

//@route POST api/auth
//@desc Authenticate user & get token  
router.post('/',
    [
      check('email','Please include a valid email').isEmail(),
      check('password',
      'Password is required').exists()
    ],
    
    async (req,res) => {
    console.log(req.body);
    
    const errors = validationResult(req);
    if(!errors.isEmpty()){
        return res.status(400).json({ errors: errors.array() })
    }

    const { email, password } = req.body;
  
    try {
    
    //See if user exists 
    let user = await User.findOne({ email });

    if(!user) {
        //400 - Bad request
        return res.status(400).json({ errors: [{ msg: 'Invalid Credentials: Email does not match ' }] });
    }
    

    const isMatch = await bcrypt.compare(password,user.password);
    


    if(!isMatch){
        //400 - Bad request
        return res.status(400).json({ errors: [{ msg: 'Invalid Credentials: Password does not match' }] });
   
    }


    // Return jsonwebtoken for authorization
    const payload  = {
        user: {
            id: user.id     //user id generated by MongoDB atlas
        }
    }
    
    jsonwebtoken.sign(
        payload,
        config.get('jwtToken'), 
        {
            expiresIn: 36000000 //reduce to 3600(1 hour) after testing
        },
        (err,token) => {
            if(err) throw err;
            res.json({ token })
        });
    
    //res.send('User has been registered');

    } catch (err) {
        console.log(err.message);
        res.status(500).send('Server error');
        
    }

    //res.send('User route')
});

module.exports = router;